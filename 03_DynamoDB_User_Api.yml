AWSTemplateFormatVersion: 2010-09-09
Description: 'userDetails'

Parameters:
  dbTableName:
    Type: String
    Default: userDetails
  apiName:
    Type: String
    Default: userDetailsAPI
  environmentName:
    Type: String
    Default: dev


Resources:
  apiGateway:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Description: 'userDetailsApi'
      Name:
        Ref: 'apiName' 
        

  postResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref apiGateway
      ParentId: !GetAtt
        - apiGateway
        - RootResourceId
      PathPart: "post"
   
  getResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref apiGateway
      ParentId: !GetAtt
        - apiGateway
        - RootResourceId
      PathPart: "get"
    
  updateResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref apiGateway
      ParentId: !GetAtt
        - apiGateway
        - RootResourceId
      PathPart: "update"
    
  deleteResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref apiGateway
      ParentId: !GetAtt
        - apiGateway
        - RootResourceId
      PathPart: "delete"


  postMethod:
    Type: 'AWS::ApiGateway::Method'
    Description: postMethod
    Properties:
      RestApiId: !Ref apiGateway
      ResourceId: !Ref postResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
            Fn::Join:
            - ''
            - - 'arn:aws:apigateway:'
              - Ref: AWS::Region
              - :lambda:path/2015-03-31/functions/
              - Fn::GetAtt:
                - postLambdaFunction
                - Arn
              - /invocations 
  
  getMethod:
    Type: 'AWS::ApiGateway::Method'
    Description: 'getMethod'
    Properties:
      RestApiId: !Ref apiGateway
      ResourceId: !Ref getResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
            Fn::Join:
            - ''
            - - 'arn:aws:apigateway:'
              - Ref: AWS::Region
              - :lambda:path/2015-03-31/functions/
              - Fn::GetAtt:
                - getLambdaFunction
                - Arn
              - /invocations
        
  updateMethod:
    Type: 'AWS::ApiGateway::Method'
    Description: 'updateMethod'
    Properties:
      RestApiId: !Ref apiGateway
      ResourceId: !Ref updateResource
      HttpMethod: PATCH
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
            Fn::Join:
            - ''
            - - 'arn:aws:apigateway:'
              - Ref: AWS::Region
              - :lambda:path/2015-03-31/functions/
              - Fn::GetAtt:
                - updateLambdaFunction
                - Arn
              - /invocations
 
  deleteMethod:
    Type: 'AWS::ApiGateway::Method'
    Description: 'deleteMethod'
    Properties:
      RestApiId: !Ref apiGateway
      ResourceId: !Ref deleteResource
      HttpMethod: DELETE
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
            Fn::Join:
            - ''
            - - 'arn:aws:apigateway:'
              - Ref: AWS::Region
              - :lambda:path/2015-03-31/functions/
              - Fn::GetAtt:
                - deleteLambdaFunction
                - Arn
              - /invocations


  postDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref apiGateway
      StageName:
        Ref: environmentName
    DependsOn:
      - postMethod

  getDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref apiGateway
      StageName:
        Ref: environmentName
    DependsOn:
      - getMethod
    
  updateDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref apiGateway
      StageName:
        Ref: environmentName
    DependsOn:
      - updateMethod
  
  deleteDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref apiGateway
      StageName:
        Ref: environmentName
    DependsOn:
      - deleteMethod
    

  IAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: Policy_api-lambda-db
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:PutItem'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:Scan'
                  - 'dynamodb:Query'
                  - 'dynamodb:UpdateItem'
                Resource: 'arn:aws:dynamodb:*:*:*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:CreateLogGroup'
                  - 'logs:PutLogEvents'
                Resource: '*'

  DynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Description: 'userDetailsTable'
      Properties:
        TableName:
          Ref: dbTableName
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"
          - AttributeName: "mobileNumber"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "id"
            KeyType: "HASH"
          - AttributeName: "mobileNumber"
            KeyType: "RANGE"
        ProvisionedThroughput:
          ReadCapacityUnits: '1'
          WriteCapacityUnits: '1'
      DependsOn:
        - IAMRole


  postLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Description: 'postFunction'
    Properties:
      Handler: handler.postData
      Runtime: nodejs12.x
      Timeout: 300
      Role: !GetAtt IAMRole.Arn

  getLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Description: 'getFunction'
    Properties:
      Handler: handler.getData
      Runtime: nodejs12.x
      Timeout: 300
      Role: !GetAtt IAMRole.Arn

  updateLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Description: 'updateFunction'
    Properties:
      Handler: handler.updateData
      Runtime: nodejs12.x
      Timeout: 300
      Role: !GetAtt IAMRole.Arn
  
  deleteLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Description: 'deleteFunction'
    Properties:
      Handler: handler.deleteData
      Runtime: nodejs12.x
      Timeout: 300
      Role: !GetAtt IAMRole.Arn
   

  postPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt postLambdaFunction.Arn
      Principal: apigateway.amazonaws.com
   
  getPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt getLambdaFunction.Arn
      Principal: apigateway.amazonaws.com
  
  updatePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt updateLambdaFunction.Arn
      Principal: apigateway.amazonaws.com
   
  deletePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt deleteLambdaFunction.Arn
      Principal: apigateway.amazonaws.com
    
 
Outputs:
 InvokeURL:
  Value: !Sub https://${apiGateway}.execute-api.${AWS::Region}.amazonaws.com/${environmentName}
